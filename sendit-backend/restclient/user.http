### SendIT User Module API Tests
### This file contains all CRUD operations for testing the User module

### ========================================
### AUTHENTICATION SETUP
### ========================================
 adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkY2YzZDBmZS0zMzExLTQ5NGUtYjJhOC1mNzI1Yzg1Nzg3MjYiLCJlbWFpbCI6ImFkbWluQHNlbmRpdC5jb20iLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE3NTM3Nzk3NjUsImV4cCI6MTc1Mzg2NjE2NX0.NmftZzfOGsay1o3JgKnCcOcmb2lVI6TXQXwJg7sdKKw
### 1. Register a regular user
POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "John Doe",
  "email": "john.doe@example.com",
  "password": "password123",
  "phone": "+254700123456"
}

### 2. Register an admin user
POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "Admin User",
  "email": "admin@sendit.com",
  "password": "admin123",
  "phone": "+254700654321",
  "role": "ADMIN"
}

### 3. Register a courier user
POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "Courier Driver",
  "email": "courier@sendit.com",
  "password": "courier123",
  "phone": "+254700789012",
  "role": "COURIER"
}

### 4. Login as regular user
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "password123"
}


### 4. Login as regular user
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "devmaxmillianmuiruri@gmail.com",
  "password": "password123"
}
 
### 5. Login as admin user
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "admin@sendit.com",
  "password": "admin123"
}

### 6. Login as courier user
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "courier@sendit.com",
  "password": "courier123"
}

### ========================================
### USER PROFILE OPERATIONS
### ========================================

### 7. Get current user profile (requires auth)
GET http://localhost:3000/user/profile/me
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 8. Update current user profile (requires auth)
PUT http://localhost:3000/user/profile/me
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "fullName": "John Doe Updated",
  "phone": "+254700123457"
}

### 9. Update current user password (requires auth)
PUT http://localhost:3000/user/profile/me
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "password": "newpassword123"
}

### ========================================
### ADMIN-ONLY OPERATIONS
### ========================================

### 10. Get all users (Admin only) - Basic
GET http://localhost:3000/user
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 11. Get all users with pagination (Admin only)
GET http://localhost:3000/user?page=1&limit=5
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 12. Get all users with search (Admin only)
GET http://localhost:3000/user?search=john
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 13. Get all users filtered by role (Admin only)
GET http://localhost:3000/user?role=USER
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 14. Get all couriers (Admin only)
GET http://localhost:3000/user/couriers/all
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 15. Get all regular users (Admin only)
GET http://localhost:3000/user/users/regular
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 16. Get users by specific role (Admin only)
GET http://localhost:3000/user/role/COURIER
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### USER MANAGEMENT OPERATIONS (Admin only)
### ========================================

### 17. Get specific user by ID (Admin or owner)
GET http://localhost:3000/user/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 18. Update specific user (Admin only)
PUT http://localhost:3000/user/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "fullName": "John Doe Admin Updated",
  "email": "john.updated@example.com",
  "phone": "+254700123458",
  "role": "COURIER"
}

### 19. Soft delete user (Admin only)
DELETE http://localhost:3000/user/{{userId}}/soft
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 20. Hard delete user (Admin only) - WARNING: Permanent
DELETE http://localhost:3000/user/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### PASSWORD RESET OPERATIONS
### ========================================

### 21. Request password reset
POST http://localhost:3000/auth/request-password-reset
Content-Type: application/json

{
  "email": "john.doe@example.com"
}

### 22. Reset password with code
POST http://localhost:3000/auth/reset-password
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "code": "123456",
  "newPassword": "resetpassword123"
}

### ========================================
### ERROR TESTING
### ========================================

### 23. Try to access admin endpoint as regular user (should fail)
GET http://localhost:3000/user
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 24. Try to access user endpoint as courier (should fail)
GET http://localhost:3000/user
Authorization: Bearer {{courierToken}}
Content-Type: application/json

### 25. Try to update another user's profile (should fail)
PUT http://localhost:3000/user/{{otherUserId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "fullName": "Unauthorized Update"
}

### 26. Try to register with existing email (should fail)
POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "Duplicate User",
  "email": "john.doe@example.com",
  "password": "password123"
}

### 27. Try to access protected endpoint without token (should fail)
GET http://localhost:3000/user/profile/me
Content-Type: application/json

### 28. Try to access protected endpoint with invalid token (should fail)
GET http://localhost:3000/user/profile/me
Authorization: Bearer invalid-token
Content-Type: application/json

### ========================================
### BULK OPERATIONS (Admin only)
### ========================================

### 29. Create multiple test users for bulk operations
POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "Test User 1",
  "email": "test1@example.com",
  "password": "password123",
  "phone": "+254700111111"
}

###

POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "Test User 2",
  "email": "test2@example.com",
  "password": "password123",
  "phone": "+254700222222"
}

###

POST http://localhost:3000/user/register
Content-Type: application/json

{
  "fullName": "Test Courier 1",
  "email": "courier1@example.com",
  "password": "password123",
  "phone": "+254700333333",
  "role": "COURIER"
}

### 30. Test pagination with multiple users
GET http://localhost:3000/user?page=1&limit=2
Authorization: Bearer {{adminToken}}
Content-Type: application/json

###

GET http://localhost:3000/user?page=2&limit=2
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### VARIABLES FOR REST CLIENT
### ========================================

### After running the login requests, copy the access_token values to these variables:

# @userToken = your_user_jwt_token_here
# @adminToken = your_admin_jwt_token_here
# @courierToken = your_courier_jwt_token_here
# @userId = user_id_from_response
# @otherUserId = another_user_id_for_testing

### ========================================
### USAGE INSTRUCTIONS
### ========================================

### 1. Run the registration requests first (1-3)
### 2. Run the login requests (4-6) and copy the access_token values
### 3. Update the variables above with the actual token values
### 4. Run the profile operations (7-9)
### 5. Run the admin operations (10-20) with admin token
### 6. Test error scenarios (23-28)
### 7. Test bulk operations (29-30)

### Note: Replace {{userId}} and {{otherUserId}} with actual user IDs from responses